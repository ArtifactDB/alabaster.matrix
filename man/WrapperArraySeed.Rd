% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/WrapperArraySeed.R
\name{WrapperArraySeed}
\alias{WrapperArraySeed}
\alias{loadWrapperArray}
\alias{WrapperArraySeed-class}
\alias{dim,WrapperArraySeed-method}
\alias{dimnames,WrapperArraySeed-method}
\alias{chunkdim,WrapperArraySeed-method}
\alias{path,WrapperArraySeed-method}
\alias{is_sparse,WrapperArraySeed-method}
\alias{extract_array,WrapperArraySeed-method}
\alias{extract_sparse_array,WrapperArraySeed-method}
\title{DelayedArray wrapper seed}
\description{
Virtual class for a DelayedArray wrapper seed.
This automatically forwards DelayedArray generic operations onto an internal seed class.
Concrete subclasses are expected to attach more provenance-tracking information,
while the internal seed handles the heavy lifting of data extraction, e.g., \linkS4class{H5SparseMatrixSeed} or \linkS4class{HDF5ArraySeed} objects.

Subclass developers can also create methods for the \code{loadWrapperArray} generic.
This should accept two arguments:
\itemize{
\item \code{meta}, a list containing metadata for the array.
\item \code{project}, an object specifying the project of interest.
This is the sole argument used for S4 dispatch.
}
It should then return an instance of a WrapperArray subclass that retains some provenance about the resource from which it was generated.
}
\examples{
# Mocking up a concrete wrapper array class, which contains an
# extra 'foo_id' slot to track the provenance of the data.
setClass("FooArraySeed", contains="WrapperArraySeed",
    slots=c(seed="ANY", foo_id="character"))

y <- Matrix::rsparsematrix(1000, 100, 0.01)
foo <- new("FooArraySeed", seed=y, foo_id="FOO.0001")

dim(foo)
is_sparse(foo)
extract_array(foo, list(1:10, 1:10))
extract_sparse_array(foo, list(1:10, 1:10))

}
